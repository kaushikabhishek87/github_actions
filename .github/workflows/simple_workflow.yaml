name: Continuos Integration Workflow


on:
  workflow_dispatch:
  push:
    branches:
      - main
      
  # pull_request:
  #   types:
  #     - opened
  #   branches:
  #     - main
    # paths-ignore:
    #   - '.github/workflows/*'

env:
  THIS_IS_WORKFLOW_ENV: ${{ secrets.THIS_IS_WORKFLOW_ENV  }}

defaults:
  run: 
    shell: bash

jobs:
  test:
    name: Run unit tests
    environment: testing
    env:
      THIS_IS_JOB_ENV: ${{ secrets.THIS_IS_JOB_ENV }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: 'Checkout repository'
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      - name: Load and Cache dependencies
        uses: ./.github/actions/cache-deps

      # - name: 'Run Tests'
      #   run: pytest -vv

      # - name: 'Run Tests with test report'
      #   id: run_tests
      #   run: pytest --json-report -vv

      # - name: Upload test report
      #   if: failure() && steps.run_tests.outcome == 'failure'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-report
      #     path: .report.json  
      
      - name: 'Run Tests with test report'
        continue-on-error: true 
        id: run_tests
        run: pytest --json-report -vv

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: .report.json  

      - name: Accessing Env V1
        run: |
          echo 'THIS_IS_JOB_ENV V1 : $THIS_IS_JOB_ENV'
          
      
      - name: Accessing Env V2
        run: |
          echo "THIS_IS_JOB_ENV V2 : ${{ env.THIS_IS_JOB_ENV }}"

  lint:
    name: 'Run Linting'
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
    - uses: actions/checkout@v2
      name: 'Checkout repository'

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # - name: Cache Dependencies
    #   id: cache
    #   uses: actions/cache@v2
    #   with:
    #     # path: ~/.cache/pip
    #     path: ${{ env.pythonLocation }}
    #     # key: ${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}
    #     key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

    # - name: 'Install Dependencies'
    #   if : steps.cache.outputs.cache-hit != 'true'
    #   run: pip install -r requirements.txt

    - name: Load and Cache dependencies
      id: cache-dep
      uses: ./.github/actions/cache-deps
      with:
        caching: 'false' 
        
    - name: Output information
      run: echo "Cache used? ${{steps.cache-dep.used-cache}}"

    - name: Run Linting
      run: pylint ./simple_python/simple_python.py

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Publish Wheel file name
      id: publish
      run: find dist/*.whl -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'

    - name: upload artifacts
      uses: actions/upload-artifact@v3
      with: 
        name: dist-files
        path: |
            dist 

  deploy:
    name: Deploy Job
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output Contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.lint.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying whatever"
      - name: Accessing job level Env
        run: |
          echo "THIS_IS_JOB_ENV : ${{ env.THIS_IS_JOB_ENV }}"
      
      - name: Accessing workflow level Env
        run: |
          echo "THIS_IS_WORKFLOW_ENV : $THIS_IS_WORKFLOW_ENV"

  report:
    needs: [test, deploy]
    name: Report job
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ github }}"
  
  reusable_workflow:
    needs: [lint]
    name: Using Resuable workflow
    uses: ./.github/workflows/resuable.yaml  
    with:
      artifact-name: dist-files

  print-deploy-result:
    needs: ['reusable_workflow']
    name: Print the resuable outcome
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy result
        run: echo "${{needs.reusable_workflow.outputs.result}}"    

  


